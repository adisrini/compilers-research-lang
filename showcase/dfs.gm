let
  sdatatype inttree = NODE of inttree * inttree * int
                   |: LEAF of int

  sdatatype explicitLogic = AND of explicitLogic list
                           | OR of explicitLogic list
                           | NOT of explicitLogic
                           | XOR of explicitLogic list
                           | INP of bit sw

  fun NAND lst = NOT(AND lst)
  fun NOR lst = NOT(OR lst)

  fun toHw expl =
     let fun lstToArr elist = sw #[List.length elist; gen i => (hw (toHw List.nth(elist, i)))]
      in
         case expl of
             INP(b) => b
           | AND(lst) => sw (&-> (hw (lstToArr lst)))
           | NOT(el) => sw (! (hw (lstToArr el)))
           | OR(lst) => sw (|-> (hw (lstToArr lst)))
           | XOR(lst) => sw (^-> (hw (lstToArr lst)))
      end

  module thing #(a,b,c) =
    let val temp = NOT(XOR[sw c, AND [sw a, sw b]])
  in
    hw (toHw temp)
  end
  (* should produce same vhdl as if I wrote !(c ^ (a & b))) *)


  (*
          4
        /   \
       2     6
      / \   / \
     1  3  5   7

  *)


  val tree =  NODE(
                NODE(
                  LEAF(1),
                  LEAF(3),
                  2
                ),
                NODE(
                  LEAF(5),
                  LEAF(7),
                  6
                ),
                4
              )

  val acc = ref []

  fun dfs node = case node of
                      NODE(l, r, v) => (dfs(r); acc := v::($acc); dfs(l))
                   |: LEAF(v) => (acc := v::($acc))

  val _ = dfs tree
in
  $acc
end