let
  val numbits = 4

  module rca_helper #(ai : bit, bi : bit, cin : bit) =
    let
      val sum = ai ^ bi ^ cin
      val cout = (ai & bi) | (ai & cin) | (bi & cin)
    in
      #(cout, sum)
    end

  fun map f x = case x of
                     [] => []
                  |: a::rest => (f a)::(map f rest)

  fun getSecond x = (sw #2(unsw x))

  module rca <:n:> #(a, b) =
    let
      val couts = #[n; gen i => if i = 0 then
                                  rca_helper #(a[:i:], b[:i:], 'b:0)
                                else
                                  rca_helper #(a[:i:], b[:i:], #1(couts[:i - 1:]))]
    in
      unsw Array.fromList(map getSecond (Array.toList(sw couts)))
    end

  module two_bit_rca #(a : bit[4], b : bit[4]) = rca <:numbits:> #(a, b)

in
  two_bit_rca
end