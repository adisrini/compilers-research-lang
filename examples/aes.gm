structure AES  : sig
    type byte
    type matrix
    type roundKeys
    val Encrypt : bit[128] option * roundKeys -> bits[128] option
    val Decrypt : bit[128] option * roundKeys -> bits[128] option
end  =
val sbox = #[8'u:(#'x:63), 8'u:(#'x:7c), 8'u:(#'x:77), 8'u:(#'x:7b), 8'u:(#'x:f2), 8'u:(#'x:6b), 8'u:(#'x:6f), 8'u:(#'x:c5),
             8'u:(#'x:30), 8'u:(#'x:01), 8'u:(#'x:67), 8'u:(#'x:2b), 8'u:(#'x:fe), 8'u:(#'x:d7), 8'u:(#'x:ab), 8'u:(#'x:76),
             8'u:(#'x:ca), 8'u:(#'x:82), 8'u:(#'x:c9), 8'u:(#'x:7d), 8'u:(#'x:fa), 8'u:(#'x:59), 8'u:(#'x:47), 8'u:(#'x:f0),
             8'u:(#'x:ad), 8'u:(#'x:d4), 8'u:(#'x:a2), 8'u:(#'x:af), 8'u:(#'x:9c), 8'u:(#'x:a4), 8'u:(#'x:72), 8'u:(#'x:c0),
             8'u:(#'x:b7), 8'u:(#'x:fd), 8'u:(#'x:93), 8'u:(#'x:26), 8'u:(#'x:36), 8'u:(#'x:3f), 8'u:(#'x:f7), 8'u:(#'x:cc),
             8'u:(#'x:34), 8'u:(#'x:a5), 8'u:(#'x:e5), 8'u:(#'x:f1), 8'u:(#'x:71), 8'u:(#'x:d8), 8'u:(#'x:31), 8'u:(#'x:15),
             8'u:(#'x:04), 8'u:(#'x:c7), 8'u:(#'x:23), 8'u:(#'x:c3), 8'u:(#'x:18), 8'u:(#'x:96), 8'u:(#'x:05), 8'u:(#'x:9a),
             8'u:(#'x:07), 8'u:(#'x:12), 8'u:(#'x:80), 8'u:(#'x:e2), 8'u:(#'x:eb), 8'u:(#'x:27), 8'u:(#'x:b2), 8'u:(#'x:75),
             8'u:(#'x:09), 8'u:(#'x:83), 8'u:(#'x:2c), 8'u:(#'x:1a), 8'u:(#'x:1b), 8'u:(#'x:6e), 8'u:(#'x:5a), 8'u:(#'x:a0),
             8'u:(#'x:52), 8'u:(#'x:3b), 8'u:(#'x:d6), 8'u:(#'x:b3), 8'u:(#'x:29), 8'u:(#'x:e3), 8'u:(#'x:2f), 8'u:(#'x:84),
             8'u:(#'x:53), 8'u:(#'x:d1), 8'u:(#'x:00), 8'u:(#'x:ed), 8'u:(#'x:20), 8'u:(#'x:fc), 8'u:(#'x:b1), 8'u:(#'x:5b),
             8'u:(#'x:6a), 8'u:(#'x:cb), 8'u:(#'x:be), 8'u:(#'x:39), 8'u:(#'x:4a), 8'u:(#'x:4c), 8'u:(#'x:58), 8'u:(#'x:cf),
             8'u:(#'x:d0), 8'u:(#'x:ef), 8'u:(#'x:aa), 8'u:(#'x:fb), 8'u:(#'x:43), 8'u:(#'x:4d), 8'u:(#'x:33), 8'u:(#'x:85),
             8'u:(#'x:45), 8'u:(#'x:f9), 8'u:(#'x:02), 8'u:(#'x:7f), 8'u:(#'x:50), 8'u:(#'x:3c), 8'u:(#'x:9f), 8'u:(#'x:a8),
             8'u:(#'x:51), 8'u:(#'x:a3), 8'u:(#'x:40), 8'u:(#'x:8f), 8'u:(#'x:92), 8'u:(#'x:9d), 8'u:(#'x:38), 8'u:(#'x:f5),
             8'u:(#'x:bc), 8'u:(#'x:b6), 8'u:(#'x:da), 8'u:(#'x:21), 8'u:(#'x:10), 8'u:(#'x:ff), 8'u:(#'x:f3), 8'u:(#'x:d2),
             8'u:(#'x:cd), 8'u:(#'x:0c), 8'u:(#'x:13), 8'u:(#'x:ec), 8'u:(#'x:5f), 8'u:(#'x:97), 8'u:(#'x:44), 8'u:(#'x:17),
             8'u:(#'x:c4), 8'u:(#'x:a7), 8'u:(#'x:7e), 8'u:(#'x:3d), 8'u:(#'x:64), 8'u:(#'x:5d), 8'u:(#'x:19), 8'u:(#'x:73),
             8'u:(#'x:60), 8'u:(#'x:81), 8'u:(#'x:4f), 8'u:(#'x:dc), 8'u:(#'x:22), 8'u:(#'x:2a), 8'u:(#'x:90), 8'u:(#'x:88),
             8'u:(#'x:46), 8'u:(#'x:ee), 8'u:(#'x:b8), 8'u:(#'x:14), 8'u:(#'x:de), 8'u:(#'x:5e), 8'u:(#'x:0b), 8'u:(#'x:db),
             8'u:(#'x:e0), 8'u:(#'x:32), 8'u:(#'x:3a), 8'u:(#'x:0a), 8'u:(#'x:49), 8'u:(#'x:06), 8'u:(#'x:24), 8'u:(#'x:5c),
             8'u:(#'x:c2), 8'u:(#'x:d3), 8'u:(#'x:ac), 8'u:(#'x:62), 8'u:(#'x:91), 8'u:(#'x:95), 8'u:(#'x:e4), 8'u:(#'x:79),
             8'u:(#'x:e7), 8'u:(#'x:c8), 8'u:(#'x:37), 8'u:(#'x:6d), 8'u:(#'x:8d), 8'u:(#'x:d5), 8'u:(#'x:4e), 8'u:(#'x:a9),
             8'u:(#'x:6c), 8'u:(#'x:56), 8'u:(#'x:f4), 8'u:(#'x:ea), 8'u:(#'x:65), 8'u:(#'x:7a), 8'u:(#'x:ae), 8'u:(#'x:08),
             8'u:(#'x:ba), 8'u:(#'x:78), 8'u:(#'x:25), 8'u:(#'x:2e), 8'u:(#'x:1c), 8'u:(#'x:a6), 8'u:(#'x:b4), 8'u:(#'x:c6),
             8'u:(#'x:e8), 8'u:(#'x:dd), 8'u:(#'x:74), 8'u:(#'x:1f), 8'u:(#'x:4b), 8'u:(#'x:bd), 8'u:(#'x:8b), 8'u:(#'x:8a),
             8'u:(#'x:70), 8'u:(#'x:3e), 8'u:(#'x:b5), 8'u:(#'x:66), 8'u:(#'x:48), 8'u:(#'x:03), 8'u:(#'x:f6), 8'u:(#'x:0e),
             8'u:(#'x:61), 8'u:(#'x:35), 8'u:(#'x:57), 8'u:(#'x:b9), 8'u:(#'x:86), 8'u:(#'x:c1), 8'u:(#'x:1d), 8'u:(#'x:9e),
             8'u:(#'x:e1), 8'u:(#'x:f8), 8'u:(#'x:98), 8'u:(#'x:11), 8'u:(#'x:69), 8'u:(#'x:d9), 8'u:(#'x:8e), 8'u:(#'x:94),
             8'u:(#'x:9b), 8'u:(#'x:1e), 8'u:(#'x:87), 8'u:(#'x:e9), 8'u:(#'x:ce), 8'u:(#'x:55), 8'u:(#'x:28), 8'u:(#'x:df),
             8'u:(#'x:8c), 8'u:(#'x:a1), 8'u:(#'x:89), 8'u:(#'x:0d), 8'u:(#'x:bf), 8'u:(#'x:e6), 8'u:(#'x:42), 8'u:(#'x:68),
             8'u:(#'x:41), 8'u:(#'x:99), 8'u:(#'x:2d), 8'u:(#'x:0f), 8'u:(#'x:b0), 8'u:(#'x:54), 8'u:(#'x:bb), 8'u:(#'x:16)]

val invSbox =  #[length(sbox); fn(i) => Array.indexOf(sbox, i)]

type byte = bit[8]
type matrix = byte[4][4]
type roundKeys = matrix[10]

fun inputToMatrix input = #[4; fn(i) =>
                               #[4; fn(j) =>
                                    BitArray.chunk<8> data[i * 4 + j] ] ]

fun matrixToOutput mat = BitArray.unchunk<8> #[15; fn(i) => mat[i / 4][i % 4] ]

fun addRoundKey(data: matrix, roundkey: matrix) =  data ^ roundkey
fun subBytes(data: matrix) = map2d (fn(b) => sbox[b]) data
fun invSubBytes(data: matrix) = map2d (fn(b) => invSbox[b]) data
fun shiftRows(data: matrix) = #[4; fn(i) =>
                                   #[4; fn(j) =>
                                        data[i][(j - i + 4) % 4] ] ]

fun invShiftRows(data: matrix) = #[4; fn(i) =>
                                      #[4; fn(j) =>
                                           data[i][(j + i) % 4] ] ]

fun mc1 a = a
fun mc2 a =
     (* m = if a[7] then 8'u:(#'x:1B else 8'u:(#'x:00 *)
    let val h = BitArray.replicate<8>(a[7])
        val m = h & 8'u:(#'x:1B)
    in
        (a << 1'u:1) ^ m
    end
fun mc3 a = a ^ (mc2 a)

const mcMatrix = #[ #[ mc2, mc3, mc1, mc1],
                    #[ mc1, mc2, mc3, mc1],
                    #[ mc1, mc1, mc2, mc3],
                    #[ mc3, mc1, mc1, mc2] ]

const mc09Table = #[8'u:(#'x:00), 8'u:(#'x:09), 8'u:(#'x:12), 8'u:(#'x:1b), 8'u:(#'x:24), 8'u:(#'x:2d), 8'u:(#'x:36), 8'u:(#'x:3f), 8'u:(#'x:48), 8'u:(#'x:41), 8'u:(#'x:5a), 8'u:(#'x:53), 8'u:(#'x:6c), 8'u:(#'x:65), 8'u:(#'x:7e), 8'u:(#'x:77),
                   8'u:(#'x:90), 8'u:(#'x:99), 8'u:(#'x:82), 8'u:(#'x:8b), 8'u:(#'x:b4), 8'u:(#'x:bd), 8'u:(#'x:a6), 8'u:(#'x:af), 8'u:(#'x:d8), 8'u:(#'x:d1), 8'u:(#'x:ca), 8'u:(#'x:c3), 8'u:(#'x:fc), 8'u:(#'x:f5), 8'u:(#'x:ee), 8'u:(#'x:e7),
                   8'u:(#'x:3b), 8'u:(#'x:32), 8'u:(#'x:29), 8'u:(#'x:20), 8'u:(#'x:1f), 8'u:(#'x:16), 8'u:(#'x:0d), 8'u:(#'x:04), 8'u:(#'x:73), 8'u:(#'x:7a), 8'u:(#'x:61), 8'u:(#'x:68), 8'u:(#'x:57), 8'u:(#'x:5e), 8'u:(#'x:45), 8'u:(#'x:4c),
                   8'u:(#'x:ab), 8'u:(#'x:a2), 8'u:(#'x:b9), 8'u:(#'x:b0), 8'u:(#'x:8f), 8'u:(#'x:86), 8'u:(#'x:9d), 8'u:(#'x:94), 8'u:(#'x:e3), 8'u:(#'x:ea), 8'u:(#'x:f1), 8'u:(#'x:f8), 8'u:(#'x:c7), 8'u:(#'x:ce), 8'u:(#'x:d5), 8'u:(#'x:dc),
                   8'u:(#'x:76), 8'u:(#'x:7f), 8'u:(#'x:64), 8'u:(#'x:6d), 8'u:(#'x:52), 8'u:(#'x:5b), 8'u:(#'x:40), 8'u:(#'x:49), 8'u:(#'x:3e), 8'u:(#'x:37), 8'u:(#'x:2c), 8'u:(#'x:25), 8'u:(#'x:1a), 8'u:(#'x:13), 8'u:(#'x:08), 8'u:(#'x:01),
                   8'u:(#'x:e6), 8'u:(#'x:ef), 8'u:(#'x:f4), 8'u:(#'x:fd), 8'u:(#'x:c2), 8'u:(#'x:cb), 8'u:(#'x:d0), 8'u:(#'x:d9), 8'u:(#'x:ae), 8'u:(#'x:a7), 8'u:(#'x:bc), 8'u:(#'x:b5), 8'u:(#'x:8a), 8'u:(#'x:83), 8'u:(#'x:98), 8'u:(#'x:91),
                   8'u:(#'x:4d), 8'u:(#'x:44), 8'u:(#'x:5f), 8'u:(#'x:56), 8'u:(#'x:69), 8'u:(#'x:60), 8'u:(#'x:7b), 8'u:(#'x:72), 8'u:(#'x:05), 8'u:(#'x:0c), 8'u:(#'x:17), 8'u:(#'x:1e), 8'u:(#'x:21), 8'u:(#'x:28), 8'u:(#'x:33), 8'u:(#'x:3a),
                   8'u:(#'x:dd), 8'u:(#'x:d4), 8'u:(#'x:cf), 8'u:(#'x:c6), 8'u:(#'x:f9), 8'u:(#'x:f0), 8'u:(#'x:eb), 8'u:(#'x:e2), 8'u:(#'x:95), 8'u:(#'x:9c), 8'u:(#'x:87), 8'u:(#'x:8e), 8'u:(#'x:b1), 8'u:(#'x:b8), 8'u:(#'x:a3), 8'u:(#'x:aa),
                   8'u:(#'x:ec), 8'u:(#'x:e5), 8'u:(#'x:fe), 8'u:(#'x:f7), 8'u:(#'x:c8), 8'u:(#'x:c1), 8'u:(#'x:da), 8'u:(#'x:d3), 8'u:(#'x:a4), 8'u:(#'x:ad), 8'u:(#'x:b6), 8'u:(#'x:bf), 8'u:(#'x:80), 8'u:(#'x:89), 8'u:(#'x:92), 8'u:(#'x:9b),
                   8'u:(#'x:7c), 8'u:(#'x:75), 8'u:(#'x:6e), 8'u:(#'x:67), 8'u:(#'x:58), 8'u:(#'x:51), 8'u:(#'x:4a), 8'u:(#'x:43), 8'u:(#'x:34), 8'u:(#'x:3d), 8'u:(#'x:26), 8'u:(#'x:2f), 8'u:(#'x:10), 8'u:(#'x:19), 8'u:(#'x:02), 8'u:(#'x:0b),
                   8'u:(#'x:d7), 8'u:(#'x:de), 8'u:(#'x:c5), 8'u:(#'x:cc), 8'u:(#'x:f3), 8'u:(#'x:fa), 8'u:(#'x:e1), 8'u:(#'x:e8), 8'u:(#'x:9f), 8'u:(#'x:96), 8'u:(#'x:8d), 8'u:(#'x:84), 8'u:(#'x:bb), 8'u:(#'x:b2), 8'u:(#'x:a9), 8'u:(#'x:a0),
                   8'u:(#'x:47), 8'u:(#'x:4e), 8'u:(#'x:55), 8'u:(#'x:5c), 8'u:(#'x:63), 8'u:(#'x:6a), 8'u:(#'x:71), 8'u:(#'x:78), 8'u:(#'x:0f), 8'u:(#'x:06), 8'u:(#'x:1d), 8'u:(#'x:14), 8'u:(#'x:2b), 8'u:(#'x:22), 8'u:(#'x:39), 8'u:(#'x:30),
                   8'u:(#'x:9a), 8'u:(#'x:93), 8'u:(#'x:88), 8'u:(#'x:81), 8'u:(#'x:be), 8'u:(#'x:b7), 8'u:(#'x:ac), 8'u:(#'x:a5), 8'u:(#'x:d2), 8'u:(#'x:db), 8'u:(#'x:c0), 8'u:(#'x:c9), 8'u:(#'x:f6), 8'u:(#'x:ff), 8'u:(#'x:e4), 8'u:(#'x:ed),
                   8'u:(#'x:0a), 8'u:(#'x:03), 8'u:(#'x:18), 8'u:(#'x:11), 8'u:(#'x:2e), 8'u:(#'x:27), 8'u:(#'x:3c), 8'u:(#'x:35), 8'u:(#'x:42), 8'u:(#'x:4b), 8'u:(#'x:50), 8'u:(#'x:59), 8'u:(#'x:66), 8'u:(#'x:6f), 8'u:(#'x:74), 8'u:(#'x:7d),
                   8'u:(#'x:a1), 8'u:(#'x:a8), 8'u:(#'x:b3), 8'u:(#'x:ba), 8'u:(#'x:85), 8'u:(#'x:8c), 8'u:(#'x:97), 8'u:(#'x:9e), 8'u:(#'x:e9), 8'u:(#'x:e0), 8'u:(#'x:fb), 8'u:(#'x:f2), 8'u:(#'x:cd), 8'u:(#'x:c4), 8'u:(#'x:df), 8'u:(#'x:d6),
                   8'u:(#'x:31), 8'u:(#'x:38), 8'u:(#'x:23), 8'u:(#'x:2a), 8'u:(#'x:15), 8'u:(#'x:1c), 8'u:(#'x:07), 8'u:(#'x:0e), 8'u:(#'x:79), 8'u:(#'x:70), 8'u:(#'x:6b), 8'u:(#'x:62), 8'u:(#'x:5d), 8'u:(#'x:54), 8'u:(#'x:4f), 8'u:(#'x:46)]
const mc11Table = #[8'u:(#'x:00), 8'u:(#'x:0b), 8'u:(#'x:16), 8'u:(#'x:1d), 8'u:(#'x:2c), 8'u:(#'x:27), 8'u:(#'x:3a), 8'u:(#'x:31), 8'u:(#'x:58), 8'u:(#'x:53), 8'u:(#'x:4e), 8'u:(#'x:45), 8'u:(#'x:74), 8'u:(#'x:7f), 8'u:(#'x:62), 8'u:(#'x:69),
                   8'u:(#'x:b0), 8'u:(#'x:bb), 8'u:(#'x:a6), 8'u:(#'x:ad), 8'u:(#'x:9c), 8'u:(#'x:97), 8'u:(#'x:8a), 8'u:(#'x:81), 8'u:(#'x:e8), 8'u:(#'x:e3), 8'u:(#'x:fe), 8'u:(#'x:f5), 8'u:(#'x:c4), 8'u:(#'x:cf), 8'u:(#'x:d2), 8'u:(#'x:d9),
                   8'u:(#'x:7b), 8'u:(#'x:70), 8'u:(#'x:6d), 8'u:(#'x:66), 8'u:(#'x:57), 8'u:(#'x:5c), 8'u:(#'x:41), 8'u:(#'x:4a), 8'u:(#'x:23), 8'u:(#'x:28), 8'u:(#'x:35), 8'u:(#'x:3e), 8'u:(#'x:0f), 8'u:(#'x:04), 8'u:(#'x:19), 8'u:(#'x:12),
                   8'u:(#'x:cb), 8'u:(#'x:c0), 8'u:(#'x:dd), 8'u:(#'x:d6), 8'u:(#'x:e7), 8'u:(#'x:ec), 8'u:(#'x:f1), 8'u:(#'x:fa), 8'u:(#'x:93), 8'u:(#'x:98), 8'u:(#'x:85), 8'u:(#'x:8e), 8'u:(#'x:bf), 8'u:(#'x:b4), 8'u:(#'x:a9), 8'u:(#'x:a2),
                   8'u:(#'x:f6), 8'u:(#'x:fd), 8'u:(#'x:e0), 8'u:(#'x:eb), 8'u:(#'x:da), 8'u:(#'x:d1), 8'u:(#'x:cc), 8'u:(#'x:c7), 8'u:(#'x:ae), 8'u:(#'x:a5), 8'u:(#'x:b8), 8'u:(#'x:b3), 8'u:(#'x:82), 8'u:(#'x:89), 8'u:(#'x:94), 8'u:(#'x:9f),
                   8'u:(#'x:46), 8'u:(#'x:4d), 8'u:(#'x:50), 8'u:(#'x:5b), 8'u:(#'x:6a), 8'u:(#'x:61), 8'u:(#'x:7c), 8'u:(#'x:77), 8'u:(#'x:1e), 8'u:(#'x:15), 8'u:(#'x:08), 8'u:(#'x:03), 8'u:(#'x:32), 8'u:(#'x:39), 8'u:(#'x:24), 8'u:(#'x:2f),
                   8'u:(#'x:8d), 8'u:(#'x:86), 8'u:(#'x:9b), 8'u:(#'x:90), 8'u:(#'x:a1), 8'u:(#'x:aa), 8'u:(#'x:b7), 8'u:(#'x:bc), 8'u:(#'x:d5), 8'u:(#'x:de), 8'u:(#'x:c3), 8'u:(#'x:c8), 8'u:(#'x:f9), 8'u:(#'x:f2), 8'u:(#'x:ef), 8'u:(#'x:e4),
                   8'u:(#'x:3d), 8'u:(#'x:36), 8'u:(#'x:2b), 8'u:(#'x:20), 8'u:(#'x:11), 8'u:(#'x:1a), 8'u:(#'x:07), 8'u:(#'x:0c), 8'u:(#'x:65), 8'u:(#'x:6e), 8'u:(#'x:73), 8'u:(#'x:78), 8'u:(#'x:49), 8'u:(#'x:42), 8'u:(#'x:5f), 8'u:(#'x:54),
                   8'u:(#'x:f7), 8'u:(#'x:fc), 8'u:(#'x:e1), 8'u:(#'x:ea), 8'u:(#'x:db), 8'u:(#'x:d0), 8'u:(#'x:cd), 8'u:(#'x:c6), 8'u:(#'x:af), 8'u:(#'x:a4), 8'u:(#'x:b9), 8'u:(#'x:b2), 8'u:(#'x:83), 8'u:(#'x:88), 8'u:(#'x:95), 8'u:(#'x:9e),
                   8'u:(#'x:47), 8'u:(#'x:4c), 8'u:(#'x:51), 8'u:(#'x:5a), 8'u:(#'x:6b), 8'u:(#'x:60), 8'u:(#'x:7d), 8'u:(#'x:76), 8'u:(#'x:1f), 8'u:(#'x:14), 8'u:(#'x:09), 8'u:(#'x:02), 8'u:(#'x:33), 8'u:(#'x:38), 8'u:(#'x:25), 8'u:(#'x:2e),
                   8'u:(#'x:8c), 8'u:(#'x:87), 8'u:(#'x:9a), 8'u:(#'x:91), 8'u:(#'x:a0), 8'u:(#'x:ab), 8'u:(#'x:b6), 8'u:(#'x:bd), 8'u:(#'x:d4), 8'u:(#'x:df), 8'u:(#'x:c2), 8'u:(#'x:c9), 8'u:(#'x:f8), 8'u:(#'x:f3), 8'u:(#'x:ee), 8'u:(#'x:e5),
                   8'u:(#'x:3c), 8'u:(#'x:37), 8'u:(#'x:2a), 8'u:(#'x:21), 8'u:(#'x:10), 8'u:(#'x:1b), 8'u:(#'x:06), 8'u:(#'x:0d), 8'u:(#'x:64), 8'u:(#'x:6f), 8'u:(#'x:72), 8'u:(#'x:79), 8'u:(#'x:48), 8'u:(#'x:43), 8'u:(#'x:5e), 8'u:(#'x:55),
                   8'u:(#'x:01), 8'u:(#'x:0a), 8'u:(#'x:17), 8'u:(#'x:1c), 8'u:(#'x:2d), 8'u:(#'x:26), 8'u:(#'x:3b), 8'u:(#'x:30), 8'u:(#'x:59), 8'u:(#'x:52), 8'u:(#'x:4f), 8'u:(#'x:44), 8'u:(#'x:75), 8'u:(#'x:7e), 8'u:(#'x:63), 8'u:(#'x:68),
                   8'u:(#'x:b1), 8'u:(#'x:ba), 8'u:(#'x:a7), 8'u:(#'x:ac), 8'u:(#'x:9d), 8'u:(#'x:96), 8'u:(#'x:8b), 8'u:(#'x:80), 8'u:(#'x:e9), 8'u:(#'x:e2), 8'u:(#'x:ff), 8'u:(#'x:f4), 8'u:(#'x:c5), 8'u:(#'x:ce), 8'u:(#'x:d3), 8'u:(#'x:d8),
                   8'u:(#'x:7a), 8'u:(#'x:71), 8'u:(#'x:6c), 8'u:(#'x:67), 8'u:(#'x:56), 8'u:(#'x:5d), 8'u:(#'x:40), 8'u:(#'x:4b), 8'u:(#'x:22), 8'u:(#'x:29), 8'u:(#'x:34), 8'u:(#'x:3f), 8'u:(#'x:0e), 8'u:(#'x:05), 8'u:(#'x:18), 8'u:(#'x:13),
                   8'u:(#'x:ca), 8'u:(#'x:c1), 8'u:(#'x:dc), 8'u:(#'x:d7), 8'u:(#'x:e6), 8'u:(#'x:ed), 8'u:(#'x:f0), 8'u:(#'x:fb), 8'u:(#'x:92), 8'u:(#'x:99), 8'u:(#'x:84), 8'u:(#'x:8f), 8'u:(#'x:be), 8'u:(#'x:b5), 8'u:(#'x:a8), 8'u:(#'x:a3)]
const mc13Table = #[8'u:(#'x:00), 8'u:(#'x:0d), 8'u:(#'x:1a), 8'u:(#'x:17), 8'u:(#'x:34), 8'u:(#'x:39), 8'u:(#'x:2e), 8'u:(#'x:23), 8'u:(#'x:68), 8'u:(#'x:65), 8'u:(#'x:72), 8'u:(#'x:7f), 8'u:(#'x:5c), 8'u:(#'x:51), 8'u:(#'x:46), 8'u:(#'x:4b),
                   8'u:(#'x:d0), 8'u:(#'x:dd), 8'u:(#'x:ca), 8'u:(#'x:c7), 8'u:(#'x:e4), 8'u:(#'x:e9), 8'u:(#'x:fe), 8'u:(#'x:f3), 8'u:(#'x:b8), 8'u:(#'x:b5), 8'u:(#'x:a2), 8'u:(#'x:af), 8'u:(#'x:8c), 8'u:(#'x:81), 8'u:(#'x:96), 8'u:(#'x:9b),
                   8'u:(#'x:bb), 8'u:(#'x:b6), 8'u:(#'x:a1), 8'u:(#'x:ac), 8'u:(#'x:8f), 8'u:(#'x:82), 8'u:(#'x:95), 8'u:(#'x:98), 8'u:(#'x:d3), 8'u:(#'x:de), 8'u:(#'x:c9), 8'u:(#'x:c4), 8'u:(#'x:e7), 8'u:(#'x:ea), 8'u:(#'x:fd), 8'u:(#'x:f0),
                   8'u:(#'x:6b), 8'u:(#'x:66), 8'u:(#'x:71), 8'u:(#'x:7c), 8'u:(#'x:5f), 8'u:(#'x:52), 8'u:(#'x:45), 8'u:(#'x:48), 8'u:(#'x:03), 8'u:(#'x:0e), 8'u:(#'x:19), 8'u:(#'x:14), 8'u:(#'x:37), 8'u:(#'x:3a), 8'u:(#'x:2d), 8'u:(#'x:20),
                   8'u:(#'x:6d), 8'u:(#'x:60), 8'u:(#'x:77), 8'u:(#'x:7a), 8'u:(#'x:59), 8'u:(#'x:54), 8'u:(#'x:43), 8'u:(#'x:4e), 8'u:(#'x:05), 8'u:(#'x:08), 8'u:(#'x:1f), 8'u:(#'x:12), 8'u:(#'x:31), 8'u:(#'x:3c), 8'u:(#'x:2b), 8'u:(#'x:26),
                   8'u:(#'x:bd), 8'u:(#'x:b0), 8'u:(#'x:a7), 8'u:(#'x:aa), 8'u:(#'x:89), 8'u:(#'x:84), 8'u:(#'x:93), 8'u:(#'x:9e), 8'u:(#'x:d5), 8'u:(#'x:d8), 8'u:(#'x:cf), 8'u:(#'x:c2), 8'u:(#'x:e1), 8'u:(#'x:ec), 8'u:(#'x:fb), 8'u:(#'x:f6),
                   8'u:(#'x:d6), 8'u:(#'x:db), 8'u:(#'x:cc), 8'u:(#'x:c1), 8'u:(#'x:e2), 8'u:(#'x:ef), 8'u:(#'x:f8), 8'u:(#'x:f5), 8'u:(#'x:be), 8'u:(#'x:b3), 8'u:(#'x:a4), 8'u:(#'x:a9), 8'u:(#'x:8a), 8'u:(#'x:87), 8'u:(#'x:90), 8'u:(#'x:9d),
                   8'u:(#'x:06), 8'u:(#'x:0b), 8'u:(#'x:1c), 8'u:(#'x:11), 8'u:(#'x:32), 8'u:(#'x:3f), 8'u:(#'x:28), 8'u:(#'x:25), 8'u:(#'x:6e), 8'u:(#'x:63), 8'u:(#'x:74), 8'u:(#'x:79), 8'u:(#'x:5a), 8'u:(#'x:57), 8'u:(#'x:40), 8'u:(#'x:4d),
                   8'u:(#'x:da), 8'u:(#'x:d7), 8'u:(#'x:c0), 8'u:(#'x:cd), 8'u:(#'x:ee), 8'u:(#'x:e3), 8'u:(#'x:f4), 8'u:(#'x:f9), 8'u:(#'x:b2), 8'u:(#'x:bf), 8'u:(#'x:a8), 8'u:(#'x:a5), 8'u:(#'x:86), 8'u:(#'x:8b), 8'u:(#'x:9c), 8'u:(#'x:91),
                   8'u:(#'x:0a), 8'u:(#'x:07), 8'u:(#'x:10), 8'u:(#'x:1d), 8'u:(#'x:3e), 8'u:(#'x:33), 8'u:(#'x:24), 8'u:(#'x:29), 8'u:(#'x:62), 8'u:(#'x:6f), 8'u:(#'x:78), 8'u:(#'x:75), 8'u:(#'x:56), 8'u:(#'x:5b), 8'u:(#'x:4c), 8'u:(#'x:41),
                   8'u:(#'x:61), 8'u:(#'x:6c), 8'u:(#'x:7b), 8'u:(#'x:76), 8'u:(#'x:55), 8'u:(#'x:58), 8'u:(#'x:4f), 8'u:(#'x:42), 8'u:(#'x:09), 8'u:(#'x:04), 8'u:(#'x:13), 8'u:(#'x:1e), 8'u:(#'x:3d), 8'u:(#'x:30), 8'u:(#'x:27), 8'u:(#'x:2a),
                   8'u:(#'x:b1), 8'u:(#'x:bc), 8'u:(#'x:ab), 8'u:(#'x:a6), 8'u:(#'x:85), 8'u:(#'x:88), 8'u:(#'x:9f), 8'u:(#'x:92), 8'u:(#'x:d9), 8'u:(#'x:d4), 8'u:(#'x:c3), 8'u:(#'x:ce), 8'u:(#'x:ed), 8'u:(#'x:e0), 8'u:(#'x:f7), 8'u:(#'x:fa),
                   8'u:(#'x:b7), 8'u:(#'x:ba), 8'u:(#'x:ad), 8'u:(#'x:a0), 8'u:(#'x:83), 8'u:(#'x:8e), 8'u:(#'x:99), 8'u:(#'x:94), 8'u:(#'x:df), 8'u:(#'x:d2), 8'u:(#'x:c5), 8'u:(#'x:c8), 8'u:(#'x:eb), 8'u:(#'x:e6), 8'u:(#'x:f1), 8'u:(#'x:fc),
                   8'u:(#'x:67), 8'u:(#'x:6a), 8'u:(#'x:7d), 8'u:(#'x:70), 8'u:(#'x:53), 8'u:(#'x:5e), 8'u:(#'x:49), 8'u:(#'x:44), 8'u:(#'x:0f), 8'u:(#'x:02), 8'u:(#'x:15), 8'u:(#'x:18), 8'u:(#'x:3b), 8'u:(#'x:36), 8'u:(#'x:21), 8'u:(#'x:2c),
                   8'u:(#'x:0c), 8'u:(#'x:01), 8'u:(#'x:16), 8'u:(#'x:1b), 8'u:(#'x:38), 8'u:(#'x:35), 8'u:(#'x:22), 8'u:(#'x:2f), 8'u:(#'x:64), 8'u:(#'x:69), 8'u:(#'x:7e), 8'u:(#'x:73), 8'u:(#'x:50), 8'u:(#'x:5d), 8'u:(#'x:4a), 8'u:(#'x:47),
                   8'u:(#'x:dc), 8'u:(#'x:d1), 8'u:(#'x:c6), 8'u:(#'x:cb), 8'u:(#'x:e8), 8'u:(#'x:e5), 8'u:(#'x:f2), 8'u:(#'x:ff), 8'u:(#'x:b4), 8'u:(#'x:b9), 8'u:(#'x:ae), 8'u:(#'x:a3), 8'u:(#'x:80), 8'u:(#'x:8d), 8'u:(#'x:9a), 8'u:(#'x:97)]
const mc14Table = #[8'u:(#'x:00), 8'u:(#'x:0e), 8'u:(#'x:1c), 8'u:(#'x:12), 8'u:(#'x:38), 8'u:(#'x:36), 8'u:(#'x:24), 8'u:(#'x:2a), 8'u:(#'x:70), 8'u:(#'x:7e), 8'u:(#'x:6c), 8'u:(#'x:62), 8'u:(#'x:48), 8'u:(#'x:46), 8'u:(#'x:54), 8'u:(#'x:5a),
                   8'u:(#'x:e0), 8'u:(#'x:ee), 8'u:(#'x:fc), 8'u:(#'x:f2), 8'u:(#'x:d8), 8'u:(#'x:d6), 8'u:(#'x:c4), 8'u:(#'x:ca), 8'u:(#'x:90), 8'u:(#'x:9e), 8'u:(#'x:8c), 8'u:(#'x:82), 8'u:(#'x:a8), 8'u:(#'x:a6), 8'u:(#'x:b4), 8'u:(#'x:ba),
                   8'u:(#'x:db), 8'u:(#'x:d5), 8'u:(#'x:c7), 8'u:(#'x:c9), 8'u:(#'x:e3), 8'u:(#'x:ed), 8'u:(#'x:ff), 8'u:(#'x:f1), 8'u:(#'x:ab), 8'u:(#'x:a5), 8'u:(#'x:b7), 8'u:(#'x:b9), 8'u:(#'x:93), 8'u:(#'x:9d), 8'u:(#'x:8f), 8'u:(#'x:81),
                   8'u:(#'x:3b), 8'u:(#'x:35), 8'u:(#'x:27), 8'u:(#'x:29), 8'u:(#'x:03), 8'u:(#'x:0d), 8'u:(#'x:1f), 8'u:(#'x:11), 8'u:(#'x:4b), 8'u:(#'x:45), 8'u:(#'x:57), 8'u:(#'x:59), 8'u:(#'x:73), 8'u:(#'x:7d), 8'u:(#'x:6f), 8'u:(#'x:61),
                   8'u:(#'x:ad), 8'u:(#'x:a3), 8'u:(#'x:b1), 8'u:(#'x:bf), 8'u:(#'x:95), 8'u:(#'x:9b), 8'u:(#'x:89), 8'u:(#'x:87), 8'u:(#'x:dd), 8'u:(#'x:d3), 8'u:(#'x:c1), 8'u:(#'x:cf), 8'u:(#'x:e5), 8'u:(#'x:eb), 8'u:(#'x:f9), 8'u:(#'x:f7),
                   8'u:(#'x:4d), 8'u:(#'x:43), 8'u:(#'x:51), 8'u:(#'x:5f), 8'u:(#'x:75), 8'u:(#'x:7b), 8'u:(#'x:69), 8'u:(#'x:67), 8'u:(#'x:3d), 8'u:(#'x:33), 8'u:(#'x:21), 8'u:(#'x:2f), 8'u:(#'x:05), 8'u:(#'x:0b), 8'u:(#'x:19), 8'u:(#'x:17),
                   8'u:(#'x:76), 8'u:(#'x:78), 8'u:(#'x:6a), 8'u:(#'x:64), 8'u:(#'x:4e), 8'u:(#'x:40), 8'u:(#'x:52), 8'u:(#'x:5c), 8'u:(#'x:06), 8'u:(#'x:08), 8'u:(#'x:1a), 8'u:(#'x:14), 8'u:(#'x:3e), 8'u:(#'x:30), 8'u:(#'x:22), 8'u:(#'x:2c),
                   8'u:(#'x:96), 8'u:(#'x:98), 8'u:(#'x:8a), 8'u:(#'x:84), 8'u:(#'x:ae), 8'u:(#'x:a0), 8'u:(#'x:b2), 8'u:(#'x:bc), 8'u:(#'x:e6), 8'u:(#'x:e8), 8'u:(#'x:fa), 8'u:(#'x:f4), 8'u:(#'x:de), 8'u:(#'x:d0), 8'u:(#'x:c2), 8'u:(#'x:cc),
                   8'u:(#'x:41), 8'u:(#'x:4f), 8'u:(#'x:5d), 8'u:(#'x:53), 8'u:(#'x:79), 8'u:(#'x:77), 8'u:(#'x:65), 8'u:(#'x:6b), 8'u:(#'x:31), 8'u:(#'x:3f), 8'u:(#'x:2d), 8'u:(#'x:23), 8'u:(#'x:09), 8'u:(#'x:07), 8'u:(#'x:15), 8'u:(#'x:1b),
                   8'u:(#'x:a1), 8'u:(#'x:af), 8'u:(#'x:bd), 8'u:(#'x:b3), 8'u:(#'x:99), 8'u:(#'x:97), 8'u:(#'x:85), 8'u:(#'x:8b), 8'u:(#'x:d1), 8'u:(#'x:df), 8'u:(#'x:cd), 8'u:(#'x:c3), 8'u:(#'x:e9), 8'u:(#'x:e7), 8'u:(#'x:f5), 8'u:(#'x:fb),
                   8'u:(#'x:9a), 8'u:(#'x:94), 8'u:(#'x:86), 8'u:(#'x:88), 8'u:(#'x:a2), 8'u:(#'x:ac), 8'u:(#'x:be), 8'u:(#'x:b0), 8'u:(#'x:ea), 8'u:(#'x:e4), 8'u:(#'x:f6), 8'u:(#'x:f8), 8'u:(#'x:d2), 8'u:(#'x:dc), 8'u:(#'x:ce), 8'u:(#'x:c0),
                   8'u:(#'x:7a), 8'u:(#'x:74), 8'u:(#'x:66), 8'u:(#'x:68), 8'u:(#'x:42), 8'u:(#'x:4c), 8'u:(#'x:5e), 8'u:(#'x:50), 8'u:(#'x:0a), 8'u:(#'x:04), 8'u:(#'x:16), 8'u:(#'x:18), 8'u:(#'x:32), 8'u:(#'x:3c), 8'u:(#'x:2e), 8'u:(#'x:20),
                   8'u:(#'x:ec), 8'u:(#'x:e2), 8'u:(#'x:f0), 8'u:(#'x:fe), 8'u:(#'x:d4), 8'u:(#'x:da), 8'u:(#'x:c8), 8'u:(#'x:c6), 8'u:(#'x:9c), 8'u:(#'x:92), 8'u:(#'x:80), 8'u:(#'x:8e), 8'u:(#'x:a4), 8'u:(#'x:aa), 8'u:(#'x:b8), 8'u:(#'x:b6),
                   8'u:(#'x:0c), 8'u:(#'x:02), 8'u:(#'x:10), 8'u:(#'x:1e), 8'u:(#'x:34), 8'u:(#'x:3a), 8'u:(#'x:28), 8'u:(#'x:26), 8'u:(#'x:7c), 8'u:(#'x:72), 8'u:(#'x:60), 8'u:(#'x:6e), 8'u:(#'x:44), 8'u:(#'x:4a), 8'u:(#'x:58), 8'u:(#'x:56),
                   8'u:(#'x:37), 8'u:(#'x:39), 8'u:(#'x:2b), 8'u:(#'x:25), 8'u:(#'x:0f), 8'u:(#'x:01), 8'u:(#'x:13), 8'u:(#'x:1d), 8'u:(#'x:47), 8'u:(#'x:49), 8'u:(#'x:5b), 8'u:(#'x:55), 8'u:(#'x:7f), 8'u:(#'x:71), 8'u:(#'x:63), 8'u:(#'x:6d),
                   8'u:(#'x:d7), 8'u:(#'x:d9), 8'u:(#'x:cb), 8'u:(#'x:c5), 8'u:(#'x:ef), 8'u:(#'x:e1), 8'u:(#'x:f3), 8'u:(#'x:fd), 8'u:(#'x:a7), 8'u:(#'x:a9), 8'u:(#'x:bb), 8'u:(#'x:b5), 8'u:(#'x:9f), 8'u:(#'x:91), 8'u:(#'x:83), 8'u:(#'x:8d)]

fun mc09 a = mc09Table[a]
fun mc11 a = mc11Table[a]
fun mc13 a = mc13Table[a]
fun mc14 a = mc14Table[a]

const ivnMcMatrix = #[ #[ mc14, mc11, mc13, mc09],
                       #[ mc09, mc14, mc11, mc13],
                       #[ mc13, mc09, mc14, mc11],
                       #[ mc11, mc13, mc09, mc14] ]

fun cmMult matrix col = #[4; fn(i) => #[m[i][0](col[0]) ^
                                        m[i][1](col[1]) ^
                                        m[i][2](col[2]) ^
                                        m[i][3](col[3]) ] ]

fun mixColumns(data: matrix) =
    let val x = Matrix.transpose data
        val cs = #[4; fn(i) => map (cmMult mcMatrix) x[i] ]
    in
        Matrix.transpose cs
    end


fun invMixColumns(data: matrix) =
    let val x = Matrix.transpose data
        val cs = #[4; fn(i) => map (cmMult invMcMatrix) x[i] ]
    in
        Matrix.transpose cs
    end


fun Encrypt(data: bit[128] option, roundKeys_in : roundKeys) =
    let fun stage(NONE, _) = NONE
          | stage(SOME d, rk) =
            let val d0 = subBytes data
                val d1 = shiftRows d0
                val d2 = mixColumns d1
            in
                SOME(addRoundKey(d2, rk))
            end
        fun stage9(NONE, _) = NONE
          | stage9(SOME d, rk) =
            let val d0 = subBytes d
                val d1 = shiftRows d0
            in
                SOME(addRoundKey(d1, rk))
            end

        val  rks = #[10; fn(i) => if i = 0
                                  then BitArray.zeroIf(isNone data, roundKeys_in)
                                  else #[fn(j) => dff {d = rks[i - 1][j], rst = 0} ] ]

        val round_q = #[10; fn(i) => case i of
                                          0 => dff {d = (case data of
                                                              SOME d => addRoundKey(inputToMatrix d, roundKeys_in[0])
                                                           |: NONE => NONE),
                                                    rst = NONE}
                                       |: 9 => dff {d = stage9(round_q[8], rks[r][r]), rst = NONE}
                                       |: _ => dff {d = stage(round_q[r - 1], rks[r][r]), rst = NONE}]

    in
        matrixToOutput(round_q[9])
    end

fun Decrypt(data: bit[128] option, roundKeys_in : roundKeys) =
 let fun stage(NONE, _) = NONE
       | stage(SOME d, rk) =
         let val d0 = addRoundKey(d,rk)
             val d1 = invMixColumns d0
             val d2 = invShiftRows d1
         in
             SOME(invSubBytes d2)
         end
     fun stage9(NONE, _) = NONE
       | stage9(SOME d, rk) =
         let val d0 = addRoundKey d
             val d1 = invShiftRows d0
         in
             SOME(invSubBytes d1)
         end
     val rks = #[10; fn(i) => if i = 0
                              then BitArray.zeroIf(isNone data, reverse roundKeys_in)
                              else #[10; fn(j) => dff {d = rks[i - 1][j], rst = 0} ] ]

     val round_q = #[10; fn(i) => case i of
                                       0 => dff{d=stage9(data,roundKeys_in[0]), rst=0}
                                    |: 9 => addRoundKey(round_q[8], rks[9][9])
                                    |: _ => dff{d=stage(round_q[r - 1], rks[r][r]),rst=0}]
 in
     matrixToOutput(round_q[9])
 end

end
