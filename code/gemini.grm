structure A = Absyn
structure S = GeminiString(String)
structure BA = GeminiBitArray(Vector)

fun appendTypeDec (A.TypeDec list) = SOME(list)
  | appendTypeDec _ = NONE

fun appendFunDec (A.FunctionDec list) = SOME(list)
  | appendFunDec _ = NONE

%%
%term
    EOF
  | DATATYPE | TYPE | VAL | REF | FUN | MODULE | STRUCTURE | STRUCT | SIGNATURE | SIG | LIST | SW
  | LET | IN | END | IF | THEN | ELSE
  | ORELSE | ANDALSO | NOT
  | NIL | WITH | OF | OP | CASE
  | PIPE_EQUALS | FAT_ARROW | THIN_ARROW
  | BIT_NOT | BIT_OR | BIT_AND | BIT_XOR | BIT_SLL | BIT_SRL | BIT_SRA
  | GE | GT | LE | LT | NEQ | EQ
  | UMINUS | INT_DIVIDE | INT_TIMES | INT_PLUS | INT_MINUS | INT_MOD | REAL_DIVIDE | REAL_TIMES | REAL_PLUS | REAL_MINUS
  | RBRACE | LBRACE | RBRACK | LBRACK | RPAREN | LPAREN
  | DOT | SEMICOLON | COLON | COMMA | POUND | AT | ASSIGN | BANG | CONS | POUND_TIMES
  | ID of string | TID of string | INT of int | STRING of string | REAL of real | BIT of GeminiBit.bit
  | APPLY

%nonterm
      program of A.exp
        | structs_or_sigs of A.exp
            | structures of A.structsig list
                | structure of A.structsig
                    | struct_body of A.dec list
            | signatures of A.structsig list
                | signature of A.structsig
                    | sig_body of A.def list
                    | sigs of A.def list
                        | val_sig of A.def
                        | ty_sig of A.def
                        | dataty_sig of A.def
                        | module_sig of A.def
                        | non_ty_sigs of A.def list
                        | non_dataty_sigs of A.def list
                        | non_module_sigs of A.def list
        | exp of A.exp
            | array_access of A.exp
            | access of A.exp
                | struct_access of A.exp
                | tuple_access of A.exp
                | record_access of A.exp
                | deref of A.exp
            | operation of A.exp
                | int_op of A.exp
                | real_op of A.exp
                | bit_op of A.exp
                | compare_op of A.exp
                | list_op of A.exp
            | let_block of A.exp
                | let_body of A.exp
                    | semicolon_exp0 of (A.exp * int) list
                | decs of A.dec list
                    | val_dec of A.dec
                    | fun_dec of A.dec
                        | fun_dec_no_type of A.dec
                        | fun_dec_with_type of A.dec
                        | fun_params of A.param list
                            | fun_param of A.param
                    | ty_dec of A.dec
                        | ty of A.ty
                            | no_ty_fields of A.param list
                            | ty_fields of A.param list
                            | ty_field_tail
                        | with_type
                    | dataty_dec of A.dec
                        | dataty_tail
                    | module_dec of A.dec
                        | module_dec_no_type of A.dec
                        | module_dec_with_type of A.dec
                    | non_fun_dec of A.dec list
                    | non_ty_dec of A.dec list
                    | non_dataty_dec of A.dec list
                    | non_module_dec of A.dec list
            | exp_seq of A.exp
            | assign of A.exp
            | conditional of A.exp
            | insts of A.exp
                | rec_inst of A.exp
                    | rec_inst_body
                    | rec_field_comma_tail
                | ref_inst of A.exp
                | array_inst of A.exp
                    | bit_array_inst
                | list_inst of A.exp
                    | list_elements
                | sw_tuple_inst of A.exp
                | hw_tuple_inst of A.exp
                | exp_comma_tail
            | with_value of A.exp
            | pattern_match of A.exp
                | matches
                | matches_tail
        | epsilon

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Gemini

%keyword DATATYPE TYPE VAL REF FUN MODULE STRUCTURE STRUCT SIGNATURE SIG
  LET IN END IF THEN ELSE
  ORELSE ANDALSO NOT
  NIL WITH OF OP

%prefer THEN ELSE LPAREN

%value ID ("foo")
%value INT (1)
%value STRING ("")
%value BIT (GeminiBit.fromInt(0))
%value REAL (1.0)

%change -> IN ID END
      | EQ -> ASSIGN
      | ASSIGN -> EQ
      | SEMICOLON ELSE -> ELSE
      | LET ID EQ -> LET TYPE ID EQ
      | LET ID ASSIGN -> LET VAL ID ASSIGN
      | LET ID COLON ID ASSIGN -> LET VAL ID COLON ID ASSIGN
      | LET ID LPAREN -> LET FUN ID LPAREN
      | COMMA -> SEMICOLON
      | SEMICOLON -> COMMA
      | SEMICOLON -> COLON
      | COLON -> SEMICOLON
      | SEMICOLON THEN -> THEN
      | SEMICOLON VAL -> VAL
      | SEMICOLON TYPE -> TYPE
      | SEMICOLON FUN -> FUN
      | SEMICOLON DATATYPE -> DATATYPE
      | SEMICOLON MODULE -> MODULE
      | SEMICOLON END -> END
      | SEMICOLON IN -> IN

%nonassoc INT STRING REAL BIT ID TID
%nonassoc OF
%nonassoc THEN
%nonassoc ELSE
%nonassoc LBRACK RBRACK
%right ASSIGN
%right WITH
%left LBRACE RBRACE
%left CONS
%left ORELSE
%left ANDALSO
%left BIT_SLL BIT_SRA BIT_SRL
%nonassoc EQ NEQ GT LT GE LE
%left REAL_MINUS REAL_PLUS INT_MINUS INT_PLUS BIT_XOR BIT_OR POUND_TIMES
%left REAL_DIVIDE REAL_TIMES INT_DIVIDE INT_TIMES BIT_AND INT_MOD
%left LIST SW REF
%left UMINUS BIT_NOT
%left LPAREN RPAREN APPLY

%%

program	      : structs_or_sigs                                             (structs_or_sigs)
              | exp                                                         (exp)

exp           : exp exp %prec APPLY                                         ()
              | INT                                                         (A.IntExp(INT, INTleft))
              | STRING                                                      (A.StringExp(STRING, STRINGleft))
              | REAL                                                        (A.RealExp(REAL, REALleft))
              | BIT                                                         (A.BitExp(BIT, BITleft))
              | ID                                                          (A.VarExp(A.SimpleVar(Symbol.symbol(ID), IDleft), IDleft))
              | access                                                      (access)
              | operation                                                   (operation)
              | let_block                                                   (let_block)
              | assign                                                      (assign)
              | exp_seq                                                     (exp_seq)
              | conditional                                                 (conditional)
              | insts                                                       (insts)
              | with_value                                                  (with_value)
              | pattern_match                                               (pattern_match)
              | LPAREN RPAREN                                               (A.SeqExp[])

structs_or_sigs
              : structures structs_or_sigs                                  ()
              | signatures structs_or_sigs                                  ()
              | epsilon                                                     ()

structures    : structure structures                                        ()
              | structure                                                   ()

structure     : STRUCTURE ID EQ struct_body                                 ()
              | STRUCTURE ID COLON ID EQ struct_body                        ()
              | STRUCTURE ID COLON sig_body EQ struct_body                  ()

struct_body   : STRUCT decs END                                             ()

signatures    : signature signatures                                        ()
              | signature                                                   ()

signature     : SIGNATURE ID EQ sig_body                                    ()

sig_body      : SIG sigs END                                                ()

sigs          : val_sig sigs                                                ()
              | ty_sig non_ty_sigs                                          ()
              | module_sig non_module_sigs                                  ()
              | dataty_sig non_dataty_sigs                                  ()
              | epsilon                                                     ()

non_ty_sigs   : val_sig sigs                                                ()
              | module_sig non_module_sigs                                  ()
              | dataty_sig non_dataty_sigs                                  ()
              | epsilon                                                     ()

non_module_sigs
              : val_sig sigs                                                ()
              | ty_sig non_ty_sigs                                          ()
              | dataty_sig non_dataty_sigs                                  ()
              | epsilon                                                     ()

non_dataty_sigs
              : val_sig sigs                                                ()
              | ty_sig non_ty_sigs                                          ()
              | module_sig non_module_sigs                                  ()
              | epsilon                                                     ()

val_sig       : VAL ID COLON ty                                             ()

ty_sig        : TYPE ID EQ ty                                               ()
              | TYPE ID EQ ty ty_sig                                        ()
              | TYPE ID                                                     ()
              | TYPE ID ty_sig                                              ()

module_sig    : MODULE ID COLON ty THIN_ARROW  ty                           ()
              | MODULE ID COLON ty THIN_ARROW ty module_sig                 ()

dataty_sig    : dataty_dec                                                  ()
              | dataty_dec dataty_sig                                       ()
              | DATATYPE ID                                                 ()
              | DATATYPE ID dataty_sig                                      ()

array_access  : exp LBRACK exp RBRACK                                       ()

struct_access : exp DOT ID                                                  ()

tuple_access  : POUND INT exp                                               ()

record_access : POUND ID exp                                                ()

deref         : BANG exp                                                    ()

access        : array_access                                                ()
              | struct_access                                               ()
              | tuple_access                                                ()
              | record_access                                               ()
              | deref                                                       ()

operation     : int_op                                                      (int_op)
              | real_op                                                     (real_op)
              | bit_op                                                      (bit_op)
              | compare_op                                                  (compare_op)
              | list_op                                                     (list_op)

int_op        : UMINUS exp                                                  (A.NegExp{exp: exp1, pos = UMINUSleft})
              | exp INT_PLUS exp                                            (A.OpExp{left = exp1, oper = A.IntPlusOp, right = exp2, pos = exp1left})
              | exp INT_MINUS exp                                           (A.OpExp{left = exp1, oper = A.IntMinusOp, right = exp2, pos = exp1left})
              | exp INT_TIMES exp                                           (A.OpExp{left = exp1, oper = A.IntTimesOp, right = exp2, pos = exp1left})
              | exp INT_DIVIDE exp                                          (A.OpExp{left = exp1, oper = A.IntDivideOp, right = exp2, pos = exp1left})
              | exp INT_MOD exp                                             (A.OpExp{left = exp1, oper = A.IntModOp, right = exp2, pos = exp1left})

real_op       : exp REAL_PLUS exp                                           (A.OpExp{left = exp1, oper = A.RealPlusOp, right = exp2, pos = exp1left})
              | exp REAL_MINUS exp                                          (A.OpExp{left = exp1, oper = A.RealMinusOp, right = exp2, pos = exp1left})
              | exp REAL_TIMES exp                                          (A.OpExp{left = exp1, oper = A.RealTimesOp, right = exp2, pos = exp1left})
              | exp REAL_DIVIDE exp                                         (A.OpExp{left = exp1, oper = A.RealDivideOp, right = exp2, pos = exp1left})

bit_op        : exp BIT_NOT                                                 (A.NegExp{exp: exp1, pos = exp1left})
              | exp BIT_OR exp                                              (A.OpExp{left = exp1, oper = A.BitOrOp, right = exp2, pos = exp1left})
              | exp BIT_AND exp                                             (A.OpExp{left = exp1, oper = A.BitAndOp, right = exp2, pos = exp1left})
              | exp BIT_XOR exp                                             (A.OpExp{left = exp1, oper = A.BitXorOp, right = exp2, pos = exp1left})
              | exp BIT_SLL exp                                             (A.OpExp{left = exp1, oper = A.BitSLLOp, right = exp2, pos = exp1left})
              | exp BIT_SRL exp                                             (A.OpExp{left = exp1, oper = A.BitSRLOp, right = exp2, pos = exp1left})
              | exp BIT_SRA exp                                             (A.OpExp{left = exp1, oper = A.BitSRAOp, right = exp2, pos = exp1left})

compare_op    : exp EQ exp                                                  (A.OpExp{left = exp1, oper = A.EqOp, right = exp2, pos = exp1left})
              | exp NEQ exp                                                 (A.OpExp{left = exp1, oper = A.NeqOp, right = exp2, pos = exp1left})
              | exp GT exp                                                  (A.OpExp{left = exp1, oper = A.GtOp, right = exp2, pos = exp1left})
              | exp LT exp                                                  (A.OpExp{left = exp1, oper = A.LtOp, right = exp2, pos = exp1left})
              | exp GE exp                                                  (A.OpExp{left = exp1, oper = A.GeOp, right = exp2, pos = exp1left})
              | exp LE exp                                                  (A.OpExp{left = exp1, oper = A.LeOp, right = exp2, pos = exp1left})

list_op       : exp CONS exp                                                (A.OpExp{left = exp1, oper = A.ConsOp, right = exp2, pos = exp1left})

let_block     : LET decs IN let_body END                                    (A.LetExp{decs = decs, body = let_body, pos = LETleft})

decs          : val_dec decs                                                ()
              | fun_dec non_fun_dec                                         ()
              | ty_dec non_ty_dec                                           ()
              | dataty_dec non_dataty_dec                                   ()
              | module_dec non_module_dec                                   ()
              | epsilon                                                     ()

non_fun_dec   : val_dec decs                                                ()
              | ty_dec non_ty_dec                                           ()
              | dataty_dec non_dataty_dec                                   ()
              | module_dec non_module_dec                                   ()
              | epsilon                                                     ()

non_ty_dec    : val_dec decs                                                ()
              | fun_dec non_fun_dec                                         ()
              | dataty_dec non_dataty_dec                                   ()
              | module_dec non_module_dec                                   ()
              | epsilon                                                     ()

non_dataty_dec: val_dec decs                                                ()
              | ty_dec non_ty_dec                                           ()
              | fun_dec non_fun_dec                                         ()
              | module_dec non_module_dec                                   ()
              | epsilon                                                     ()

non_module_dec: val_dec decs                                                ()
              | fun_dec non_fun_dec                                         ()
              | ty_dec non_ty_dec                                           ()
              | dataty_dec non_dataty_dec                                   ()
              | epsilon                                                     ()

val_dec       : VAL ID EQ exp                                               ()
              | VAL ID COLON ty EQ exp                                      ()

fun_dec       : fun_dec_no_type                                             ()
              | fun_dec_with_type                                           ()
              | fun_dec_no_type fun_dec                                     ()
              | fun_dec_with_type fun_dec                                   ()

fun_dec_no_type
              : FUN ID fun_params EQ exp                                    ()

fun_dec_with_type
              : FUN ID fun_params COLON ty EQ exp                           ()

fun_params    : fun_params fun_param                                        ()
              | fun_param                                                   ()

fun_param     : ID                                                          ()
              | LPAREN no_ty_fields RPAREN                                  ()
              | LPAREN ty_fields RPAREN                                     ()

ty_dec        : TYPE ID EQ ty with_type                                     ()
              | TYPE ID EQ ty with_type ty_dec                              ()

ty            : TID                                                         ()
              | ID                                                          ()
              | ty INT_TIMES ty                                             ()
              | ty POUND_TIMES ty                                           ()
              | LBRACE ty_fields RBRACE                                     ()
              | ty AT INT                                                   ()
              | ty LBRACK INT RBRACK                                        ()
              | ty LIST                                                     ()
              | ty REF                                                      ()
              | ty SW                                                       ()

no_ty_fields  : ID                                                          ()
              | no_ty_fields COMMA ID                                       ()

ty_fields     : ty_field_tail                                               ()
              | epsilon                                                     ()

ty_field_tail : ID COLON ty                                                 ()
              | ty_field_tail COMMA ID COLON ty                             ()

with_type     : WITH OP EQ LPAREN ID COMMA ID RPAREN EQ exp                 ()
              | WITH OP NEQ LPAREN ID COMMA ID RPAREN EQ exp                ()
              | WITH OP GT LPAREN ID COMMA ID RPAREN EQ exp                 ()
              | WITH OP LT LPAREN ID COMMA ID RPAREN EQ exp                 ()
              | WITH OP GE LPAREN ID COMMA ID RPAREN EQ exp                 ()
              | WITH OP LE LPAREN ID COMMA ID RPAREN EQ exp                 ()

dataty_dec    : DATATYPE ID EQ ID OF ty dataty_tail                         ()

dataty_tail   : PIPE_EQUALS ID OF ty dataty_tail                            ()
              | epsilon                                                     ()

module_dec    : module_dec_no_type                                          ()
              | module_dec_with_type                                        ()

module_dec_no_type
              : MODULE ID fun_param EQ exp                                  ()

module_dec_with_type
              : MODULE ID fun_param COLON ty EQ exp                         ()

let_body      : exp semicolon_exp0                                          ()

semicolon_exp0: SEMICOLON exp semicolon_exp0                                ([(exp1, exp1left)] @ semicolon_exp0)
              | epsilon                                                     ([])

exp_seq       : LPAREN exp RPAREN                                           (A.SeqExp([(exp1, exp1left)]))
              | LPAREN exp SEMICOLON exp semicolon_exp0 RPAREN              (A.SeqExp([(exp1, exp1left)] @ [(exp2, exp2left)] @ semicolon_exp0))

assign        : exp ASSIGN exp                                              ()

exp_comma_tail: COMMA exp exp_comma_tail                                    ()
              | epsilon                                                     ()

conditional   : IF exp THEN exp ELSE exp                                    ()
              | IF exp THEN exp                                             ()
              | exp ANDALSO exp                                             ()
              | exp ORELSE exp                                              ()

insts         : rec_inst                                                    ()
              | ref_inst                                                    ()
              | array_inst                                                  ()
              | list_inst                                                   ()
              | sw_tuple_inst                                               ()
              | hw_tuple_inst                                               ()

rec_inst      : LBRACE rec_inst_body RBRACE                                 ()

rec_inst_body : ID EQ exp rec_field_comma_tail                              ()
              | epsilon                                                     ()

rec_field_comma_tail
              : COMMA ID EQ exp rec_field_comma_tail                        ()
              | epsilon                                                     ()

ref_inst      : REF exp                                                     ()

array_inst    : POUND LBRACK exp exp_comma_tail RBRACK                      ()
              | POUND LBRACK exp COMMA matches RBRACK                       ()
              | bit_array_inst                                              ()

list_inst     : LBRACK list_elements RBRACK                                 ()
              | NIL                                                         ()

list_elements : exp exp_comma_tail                                          ()
              | epsilon                                                     ()

sw_tuple_inst : LPAREN exp exp_comma_tail RPAREN                            ()

hw_tuple_inst : POUND LPAREN exp exp_comma_tail RPAREN                      ()

bit_array_inst: exp TID COLON exp                                           ()

with_value    : exp WITH rec_inst                                           ()

pattern_match : CASE exp OF matches                                         ()

matches       : exp FAT_ARROW exp matches_tail                              ()

matches_tail  : matches_tail PIPE_EQUALS exp FAT_ARROW exp                  ()
              | epsilon                                                     ()

epsilon       :                                                             ()
