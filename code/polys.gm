let

  (* explicitly typed, no POLY *)
  fun f1 (x : int) : int = x + 1

  (* implicitly typed, but no polymorphism so no POLY *)
  fun f2 x y = x + y

  (* implicitly typed with polymorphism, should POLY*)
  fun f3 x y = (x = y)

  (* implicitly typed with polymorphism, calling on instance should unpoly *)
  (* should leave f4: poly(['a], 'a -> 'a) *)
  (* should make g: unit -> int *)
  fun f4 x = x
  fun g1 () = f4 10

  (* implicitly typed with polymorphism, calling on instance should unpoly *)
  (* should leave f5: 'a * int -> 'a *)
  (* should make g: int -> int *)
  fun f5(x, y) = (y + 10; x)
  fun g2 z = f5(10, z)

  (*

  fun polyTest x =
     let fun f y = y x   (* f: Poly['c] ('a->'c)->'c' *)
         val z = x+2		(* substitute int for 'a in the poly *)
         val a = f g (* if g is some int -> string fn, don't substitute string globally in the poly in venv, instead just unpoly *)
     in
         (f,z)
     end

  *)
in
  0
end
