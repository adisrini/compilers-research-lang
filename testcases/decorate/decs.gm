let
  (* basic val dec *)
  val x : bit[4][5] = 0

  (* fun dec with mixed implicit and explicit parameters *)
  fun foo (a) (b: int, c: string) = b

  (* fun dec with explicit return type *)
  fun bar a : string = ""

  (* type dec followed by val dec using that type *)
  type s = int
  val x : s = 10

  (* type dec with tyvar *)
  type 'a twin = ('a * 'a)

  (* datatype dec *)
  sdatatype intoption = ISOME of int
                    |: INONE

  (* datatype dec with tyvar *)
  sdatatype 'a option = SOME of 'a
                    |: NONE

  (* recursive datatype *)
  sdatatype ilist = EMPTY
                |: LIST of int * ilist

  (* module dec *)
  module isZero (x: bit) = x ^ 'b:1

  val x : intoption = INONE

  val y : int option = SOME 0

  type ('a, 'b) pair = 'a * 'b

  val z : (int, string) pair = (0, "")
in
  0
end
